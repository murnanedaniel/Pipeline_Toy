Using  cuda
[tensor([[[[ 0.5765,  0.7333,  0.4667,  ..., -0.1608,  0.2627,  0.6863],
          [ 0.5843,  0.7569,  0.2157,  ..., -0.5373, -0.4118,  0.3333],
          [ 0.6000,  0.7725,  0.0431,  ..., -0.6392, -0.4510, -0.1216],
          ...,
          [ 0.5686,  0.6235,  0.6314,  ...,  0.3961,  0.3804,  0.3333],
          [ 0.5843,  0.6235,  0.6157,  ...,  0.3725,  0.3725,  0.3647],
          [ 0.6078,  0.5529,  0.5922,  ...,  0.3725,  0.3725,  0.3255]],

         [[ 0.6157,  0.7725,  0.5373,  ...,  0.0275,  0.4353,  0.8275],
          [ 0.6314,  0.7961,  0.2941,  ..., -0.3412, -0.2392,  0.4745],
          [ 0.6471,  0.8275,  0.1216,  ..., -0.4510, -0.2784,  0.0196],
          ...,
          [ 0.4745,  0.5294,  0.5373,  ...,  0.3569,  0.3412,  0.2941],
          [ 0.4510,  0.5216,  0.5216,  ...,  0.3333,  0.3333,  0.3255],
          [ 0.4510,  0.4431,  0.5216,  ...,  0.3333,  0.3333,  0.2863]],

         [[ 0.8353,  1.0000,  0.5529,  ..., -0.2549,  0.3020,  0.8510],
          [ 0.8275,  0.9922,  0.3098,  ..., -0.6784, -0.4118,  0.4824],
          [ 0.7961,  0.9686,  0.1137,  ..., -0.7569, -0.4353,  0.0275],
          ...,
          [ 0.1294,  0.2157,  0.2392,  ...,  0.1059,  0.0902,  0.0431],
          [ 0.1373,  0.2235,  0.2471,  ...,  0.0824,  0.0824,  0.0745],
          [ 0.1216,  0.1294,  0.2078,  ...,  0.0824,  0.0824,  0.0353]]],


        [[[ 0.5216,  0.8902,  0.9765,  ...,  0.9686,  0.9451,  0.8353],
          [ 0.3020,  0.8431,  0.9922,  ...,  0.9843,  0.9529,  0.8510],
          [ 0.1373,  0.6392,  0.8824,  ...,  0.9451,  0.9059,  0.8196],
          ...,
          [ 0.3569,  0.3882,  0.4980,  ...,  0.4667,  0.4588,  0.4588],
          [ 0.4431,  0.4510,  0.5451,  ...,  0.4353,  0.3804,  0.4353],
          [ 0.4275,  0.4510,  0.5216,  ...,  0.4275,  0.4196,  0.4275]],

         [[ 0.6706,  0.9294,  0.9765,  ...,  0.9686,  0.9765,  0.9765],
          [ 0.4824,  0.9216,  1.0000,  ...,  1.0000,  1.0000,  1.0000],
          [ 0.3569,  0.7804,  0.9529,  ...,  0.9922,  0.9843,  0.9922],
          ...,
          [ 0.4118,  0.4196,  0.5059,  ...,  0.4667,  0.4588,  0.4667],
          [ 0.4902,  0.4824,  0.5529,  ...,  0.4353,  0.3804,  0.4353],
          [ 0.4745,  0.4745,  0.5294,  ...,  0.4275,  0.4196,  0.4353]],

         [[ 0.6627,  0.9294,  0.9843,  ...,  0.9686,  0.9686,  0.9686],
          [ 0.4745,  0.9294,  1.0000,  ...,  1.0000,  1.0000,  1.0000],
          [ 0.3333,  0.7647,  0.9451,  ...,  0.9922,  0.9843,  0.9765],
          ...,
          [ 0.4196,  0.4196,  0.4902,  ...,  0.4667,  0.4588,  0.4745],
          [ 0.5137,  0.4980,  0.5529,  ...,  0.4353,  0.3804,  0.4431],
          [ 0.5137,  0.5059,  0.5451,  ...,  0.4275,  0.4196,  0.4431]]],


        [[[-0.6627, -0.6471, -0.5843,  ..., -0.5216, -0.6235, -0.5373],
          [-0.6314, -0.6078, -0.5922,  ..., -0.4824, -0.5373, -0.4667],
          [-0.6078, -0.6078, -0.5843,  ..., -0.4510, -0.3647, -0.3804],
          ...,
          [-0.3490, -0.3804, -0.3098,  ..., -0.3961, -0.3255, -0.3412],
          [-0.3569, -0.3569, -0.3255,  ..., -0.3412, -0.2627, -0.2863],
          [-0.3412, -0.3255, -0.2863,  ..., -0.3333, -0.3255, -0.3569]],

         [[-0.6235, -0.6235, -0.5765,  ..., -0.4353, -0.5686, -0.5216],
          [-0.6078, -0.5922, -0.6000,  ..., -0.4275, -0.4980, -0.4510],
          [-0.5922, -0.6000, -0.6000,  ..., -0.4196, -0.3333, -0.3569],
          ...,
          [-0.2314, -0.2471, -0.1686,  ..., -0.2627, -0.1686, -0.1529],
          [-0.2314, -0.2078, -0.1451,  ..., -0.1686, -0.0980, -0.1294],
          [-0.2157, -0.1765, -0.1059,  ..., -0.1765, -0.1765, -0.2078]],

         [[-0.7176, -0.7098, -0.6549,  ..., -0.5843, -0.6706, -0.6000],
          [-0.6941, -0.6784, -0.6784,  ..., -0.5451, -0.6078, -0.5608],
          [-0.6784, -0.6784, -0.6706,  ..., -0.5216, -0.4431, -0.4980],
          ...,
          [-0.4275, -0.4745, -0.4353,  ..., -0.5216, -0.4510, -0.4510],
          [-0.4353, -0.4510, -0.4431,  ..., -0.4824, -0.3961, -0.4039],
          [-0.4353, -0.4275, -0.4039,  ..., -0.4353, -0.4196, -0.4510]]],


        [[[ 0.2078,  0.2235,  0.2235,  ...,  0.8745,  0.8745,  0.8353],
          [ 0.2314,  0.2392,  0.2392,  ...,  0.8980,  0.9059,  0.8667],
          [ 0.2392,  0.2392,  0.2471,  ...,  0.9059,  0.9137,  0.9059],
          ...,
          [ 0.3647, -0.0275, -0.0118,  ...,  0.6000,  0.5529,  0.6235],
          [ 0.6784,  0.7490,  0.7961,  ...,  0.8275,  0.8353,  0.8039],
          [ 0.6706,  0.6706,  0.6706,  ...,  0.7725,  0.7882,  0.7882]],

         [[ 0.3020,  0.3098,  0.3176,  ...,  0.8824,  0.8824,  0.8431],
          [ 0.3176,  0.3333,  0.3333,  ...,  0.9059,  0.9137,  0.8745],
          [ 0.3333,  0.3333,  0.3412,  ...,  0.9137,  0.9216,  0.9137],
          ...,
          [ 0.3725, -0.0275,  0.0275,  ...,  0.5451,  0.5294,  0.5765],
          [ 0.7255,  0.7804,  0.7882,  ...,  0.8353,  0.8431,  0.8118],
          [ 0.6863,  0.6941,  0.7020,  ...,  0.7961,  0.7961,  0.8118]],

         [[ 0.5137,  0.5216,  0.5294,  ...,  0.9059,  0.9059,  0.8824],
          [ 0.5294,  0.5373,  0.5373,  ...,  0.9216,  0.9216,  0.8980],
          [ 0.5373,  0.5373,  0.5373,  ...,  0.9294,  0.9373,  0.9373],
          ...,
          [ 0.3176, -0.0902,  0.0196,  ...,  0.4510,  0.4667,  0.5137],
          [ 0.7725,  0.8510,  0.8588,  ...,  0.8902,  0.8902,  0.8588],
          [ 0.7490,  0.7333,  0.7490,  ...,  0.8275,  0.8196,  0.8510]]]]), tensor([1, 9, 4, 0])]
torch.Size([4, 65, 3, 3])
torch.Size([780, 3])
torch.Size([780, 2051])
torch.Size([780, 405])
torch.Size([780, 10])
Traceback (most recent call last):
  File "src/sweep_test.py", line 139, in <module>
    main()
  File "src/sweep_test.py", line 105, in main
    loss = criterion(outputs, labels)
  File "/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/torch/nn/modules/module.py", line 547, in __call__
    result = self.forward(*input, **kwargs)
  File "/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/torch/nn/modules/loss.py", line 916, in forward
    ignore_index=self.ignore_index, reduction=self.reduction)
  File "/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/torch/nn/functional.py", line 1995, in cross_entropy
    return nll_loss(log_softmax(input, 1), target, weight, None, ignore_index, None, reduction)
  File "/usr/common/software/pytorch/v1.2.0-gpu/lib/python3.6/site-packages/torch/nn/functional.py", line 1822, in nll_loss
    .format(input.size(0), target.size(0)))
ValueError: Expected input batch_size (780) to match target batch_size (4).
